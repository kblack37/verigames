//This script inherits many settings from java/build.gradle

dependencies {
	compile fileTree(dir: "lib", include: "**/*.jar", exclude: "junit-4.8.2.jar")
	testCompile files("lib/junit-4.8.2.jar")
}

sourceSets {
	main {
		scala {
			srcDir 'src'
		}

		java {
			srcDir 'src'
		}
	}

	test {
		java {
			srcDir 'test'
		}
	}
}

buildDir = 'bin'

tasks.compileJava {
	options.forkOptions.jvmArgs += '-J-Djsr308_imports=checkers.interning.quals.*:checkers.nullness.quals.*:checkers.regex.quals.*:checkers.signature.quals.*'
}

// IMPORTANT: If "libs" is packaged in the JAR file you end up with an infinitely
// recursive jar task that will fill up your hard drive (eventually)
tasks.jar {
	//from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	exclude("dependency-cache", "libs", "tmp")
}

task testSetup(type: Copy) {
	description = "Copies test files to a temporary working directory"
	from "test/verigames/level/hadoop-distcp.xml"
	from "test/verigames/layout/GETLayoutTest.expected.xml"
	into "${buildDir}/test-working-dir"
}

test {
	dependsOn testSetup
	useJUnit()
	workingDir = "${buildDir}/test-working-dir"

	// Gradle isn't very smart, and will run our test classes twice unless
	// we specify them manually. (One way to solve this would be to remove
	// these suite tests entirely so Gradle only finds the tests once, but
	// this solution works for now.)
	scanForTestClasses = false
	includes = [
		'verigames/level/SpecificationTests.class',
		'verigames/level/ImplementationTests.class',
		'verigames/layout/SpecificationTests.class',
		'verigames/layout/ImplementationTests.class',
		'verigames/graph/SpecificationTests.class',
		'verigames/graph/ImplementationTests.class',
		'verigames/utilities/SpecificationTests.class',
		'verigames/utilities/ImplementationTests.class'
	]
}
