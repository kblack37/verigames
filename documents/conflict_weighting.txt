                  Conflict and Pipe Width Weighting in Verigames

I. Background:

    Currently, Verigames treats all conflicts as equal, deducting a certain point value from the user's score for each conflict. In practice, this is unideal, as different locations for a conflict (or buzzsaw location) may be better or worse in helping the human verifier understand and fix the potential bug.

    The primary tool for motivating the user in the game is scoring. Thus, the scoring of conflicts and pipe widths should be weighted such that a higher-scoring solution is more likely to provide better information to the developer. Furthermore, the user should be given some visual cue regarding potential alternative conflict locations and the relative cost of each conflict. This prevents the user from having to manually explore each possibility and go back to the one with the best score, which would be a tedious process.

    To accomplish this, a weighting system should be introduced as an optional step in game board creation that takes as input:
    - World.xml, as produced by the GameSolver
    - The .java files for the program.
    - User input (real or simulated) to produce actual executions of the program

    Using a policy involving static and/or dynamic analysis, it would then output:
    - The World.xml file modified to contain an additional attribute on nodes and edges indicating the relative cost of a conflict at that point.

II. Weighting Mechanism:

    The mechanism for adding the weights involves changes to the XML and user interface to facilitate pipes and conflicts with different weights.

    1. XML

        The world XML definition will be modified to include an optional "cost" attribute on nodes and edges, providing weighting for merges and pinch points, respectively. The cost will be a floating point number that should be multiplied by the default score to produce the adjusted score, making a conflict more or less costly. Thus, a value greater than 1.0 indicates that the analysis indicated that the conflict should receive a larger penalty, a cost of 1.0 would indicate that the conflict should result in the default penalty, and a cost between 0.0 and 1.0 indicate that the cost should receive a smaller penalty than the default, with a score of 0.0 indicating the conflict should receive no penalty. The mechanism makes it possible to include negative costs, which would make a conflict or traditionally-harmful pipe-width setting benefit the user's score. This is expected to be utilized rarely, at most, but the design makes it possible, should the policy deem it helpful. The absence of a weight attribute is equivalent to including a weight attribute with a value of 1.0.

    2. User Interface

        a. Scoring - Using the weights from the modified world XML, the game should apply a modified score deduction for each conflict and pipe, as described in the XML section above. 

        b. Visualization - The game should produce some visualization so that users can easily see the relative weight of each conflict. This could be accomplished by having the "sparks" produced when there is a conflict scale relative to the weight of the conflicts. Because users should be able to see the relative cost of current conflicts as well as potential conflicts, a modifier key should be introduced (e.g. CTRL) which applies the spark visualization to every potential conflict location and allows the user to estimate the relative weight of each conflict based on the relative size of the sparks at the conflict location.

    Additionally, bytecode instrumentation will be developed to provide dynamic dataflow analysis as a mechanism for determining the weights of pipes and conflicts.